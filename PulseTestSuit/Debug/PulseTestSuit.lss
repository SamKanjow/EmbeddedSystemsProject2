
PulseTestSuit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000001a8  0000023c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800102  00800102  0000023e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000023e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000270  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ac3  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000762  00000000  00000000  00000e13  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000448  00000000  00000000  00001575  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000178  00000000  00000000  000019c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000447  00000000  00000000  00001b38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000280  00000000  00000000  00001f7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  000021ff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ea       	ldi	r30, 0xA8	; 168
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 30       	cpi	r26, 0x0E	; 14
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 c7 00 	call	0x18e	; 0x18e <main>
  9e:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initializePWM>:
}

//Read sensor takes in the latest value stored in the sensors array at the specified index and returns it. This value is updated via the ADC_vect interrupt. 
uint16_t readSensor(uint8_t analogPin){
	return sensorValues[analogPin];
}
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	80 66       	ori	r24, 0x60	; 96
  aa:	8a b9       	out	0x0a, r24	; 10
  ac:	17 bc       	out	0x27, r1	; 39
  ae:	18 bc       	out	0x28, r1	; 40
  b0:	84 b5       	in	r24, 0x24	; 36
  b2:	80 68       	ori	r24, 0x80	; 128
  b4:	84 bd       	out	0x24, r24	; 36
  b6:	84 b5       	in	r24, 0x24	; 36
  b8:	80 62       	ori	r24, 0x20	; 32
  ba:	84 bd       	out	0x24, r24	; 36
  bc:	84 b5       	in	r24, 0x24	; 36
  be:	83 60       	ori	r24, 0x03	; 3
  c0:	84 bd       	out	0x24, r24	; 36
  c2:	85 b5       	in	r24, 0x25	; 37
  c4:	85 60       	ori	r24, 0x05	; 5
  c6:	85 bd       	out	0x25, r24	; 37
  c8:	08 95       	ret

000000ca <initializeMotors>:
  ca:	0e 94 53 00 	call	0xa6	; 0xa6 <initializePWM>
  ce:	8a b1       	in	r24, 0x0a	; 10
  d0:	84 69       	ori	r24, 0x94	; 148
  d2:	8a b9       	out	0x0a, r24	; 10
  d4:	20 9a       	sbi	0x04, 0	; 4
  d6:	08 95       	ret

000000d8 <selectChannel>:
  d8:	ec e7       	ldi	r30, 0x7C	; 124
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	90 81       	ld	r25, Z
  de:	90 7e       	andi	r25, 0xE0	; 224
  e0:	8f 71       	andi	r24, 0x1F	; 31
  e2:	89 2b       	or	r24, r25
  e4:	80 83       	st	Z, r24
  e6:	08 95       	ret

000000e8 <startConversion>:

//For convenience startConversion is used instead of the bit maths. 
void startConversion(){
	ADCSRA |= (1 << ADSC);
  e8:	ea e7       	ldi	r30, 0x7A	; 122
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	80 64       	ori	r24, 0x40	; 64
  f0:	80 83       	st	Z, r24
  f2:	08 95       	ret

000000f4 <__vector_21>:

//Initial channel set to Infra red sensor right.
volatile uint8_t currentAnalogChannel = OPTICAL_FRONT;

//Interrupt service routine to update the sensor value array continuously using interrupts
ISR(ADC_vect){
  f4:	1f 92       	push	r1
  f6:	0f 92       	push	r0
  f8:	0f b6       	in	r0, 0x3f	; 63
  fa:	0f 92       	push	r0
  fc:	11 24       	eor	r1, r1
  fe:	2f 93       	push	r18
 100:	3f 93       	push	r19
 102:	4f 93       	push	r20
 104:	5f 93       	push	r21
 106:	6f 93       	push	r22
 108:	7f 93       	push	r23
 10a:	8f 93       	push	r24
 10c:	9f 93       	push	r25
 10e:	af 93       	push	r26
 110:	bf 93       	push	r27
 112:	ef 93       	push	r30
 114:	ff 93       	push	r31
	
	//There is a simple logic change that would allow up to 6 sensors 0-5 analog pins
	
	if(currentAnalogChannel > IR_LEFT){
 116:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 11a:	86 30       	cpi	r24, 0x06	; 6
 11c:	18 f0       	brcs	.+6      	; 0x124 <__vector_21+0x30>
		currentAnalogChannel = OPTICAL_FRONT;
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		} else {}
			
	sensorValues[currentAnalogChannel] = ADCW;
 124:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 12e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 132:	ee 0f       	add	r30, r30
 134:	ff 1f       	adc	r31, r31
 136:	ee 5f       	subi	r30, 0xFE	; 254
 138:	fe 4f       	sbci	r31, 0xFE	; 254
 13a:	91 83       	std	Z+1, r25	; 0x01
 13c:	80 83       	st	Z, r24
	
	
	
	selectChannel(currentAnalogChannel++);
 13e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 142:	91 e0       	ldi	r25, 0x01	; 1
 144:	98 0f       	add	r25, r24
 146:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__data_start>
 14a:	0e 94 6c 00 	call	0xd8	; 0xd8 <selectChannel>
	startConversion();
 14e:	0e 94 74 00 	call	0xe8	; 0xe8 <startConversion>
}
 152:	ff 91       	pop	r31
 154:	ef 91       	pop	r30
 156:	bf 91       	pop	r27
 158:	af 91       	pop	r26
 15a:	9f 91       	pop	r25
 15c:	8f 91       	pop	r24
 15e:	7f 91       	pop	r23
 160:	6f 91       	pop	r22
 162:	5f 91       	pop	r21
 164:	4f 91       	pop	r20
 166:	3f 91       	pop	r19
 168:	2f 91       	pop	r18
 16a:	0f 90       	pop	r0
 16c:	0f be       	out	0x3f, r0	; 63
 16e:	0f 90       	pop	r0
 170:	1f 90       	pop	r1
 172:	18 95       	reti

00000174 <initializeADC>:
}

//Initializes the ADC registers to support the IR and optical sensors.
void initializeADC(){
	//Configure the ADMUX for AVCC as input (internal 5v reference) / not left adjusted results (10-bit resolution) / ADC0 as input / 0b0100:0000
	ADMUX = 0x40;
 174:	80 e4       	ldi	r24, 0x40	; 64
 176:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	//Configure ADCSRA for enable ADC / don't start conversion / prescaler 128 / disable auto-trigger / enable ADC interrupt 0b10001:111
	ADCSRA = 0x8F;
 17a:	8f e8       	ldi	r24, 0x8F	; 143
 17c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	
	selectChannel(OPTICAL_FRONT);
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	0e 94 6c 00 	call	0xd8	; 0xd8 <selectChannel>
	sei();
 186:	78 94       	sei
	startConversion();
 188:	0e 94 74 00 	call	0xe8	; 0xe8 <startConversion>
 18c:	08 95       	ret

0000018e <main>:
	startConversion();
}

int main(void)
{
	initializeMotors();
 18e:	0e 94 65 00 	call	0xca	; 0xca <initializeMotors>
	initializeADC();
 192:	0e 94 ba 00 	call	0x174	; 0x174 <initializeADC>
	ADMUX = (ADMUX & 0xE0) | (analogPin & 0x1F);   //select channel (MUX0-4 bits)
}

//Read sensor takes in the latest value stored in the sensors array at the specified index and returns it. This value is updated via the ADC_vect interrupt. 
uint16_t readSensor(uint8_t analogPin){
	return sensorValues[analogPin];
 196:	e2 e0       	ldi	r30, 0x02	; 2
 198:	f1 e0       	ldi	r31, 0x01	; 1
 19a:	82 85       	ldd	r24, Z+10	; 0x0a
 19c:	93 85       	ldd	r25, Z+11	; 0x0b
 19e:	86 81       	ldd	r24, Z+6	; 0x06
 1a0:	97 81       	ldd	r25, Z+7	; 0x07
 1a2:	fb cf       	rjmp	.-10     	; 0x19a <main+0xc>

000001a4 <_exit>:
 1a4:	f8 94       	cli

000001a6 <__stop_program>:
 1a6:	ff cf       	rjmp	.-2      	; 0x1a6 <__stop_program>
